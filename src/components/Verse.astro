---
import fs from "fs";
import path from "path";

const bibleVersion = [
  {
    id: "eng_kjv",
    abbr: "KJV",
    name: "King James (Authorized) Version",
    path: "./src/data/eng_kjv.json",
  },
  {
    id: "eng_asv",
    abbr: "ASV",
    name: "American Standard Version",
    path: "./src/data/eng_asv.json",
  },
  {
    id: "eng_web",
    abbr: "WEB",
    name: "World English Bible",
    path: "./src/data/eng_web.json",
  },
  {
    id: "niv",
    abbr: "NIV",
    name: "New International Version",
    path: "./src/data/niv.json",
  },
];

// Load the first Bible version to get a random verse
const firstBiblePath = path.resolve(bibleVersion[0].path);
const firstBibleData = JSON.parse(fs.readFileSync(firstBiblePath, "utf-8"));

function getRandomElement(array) {
  return array[Math.floor(Math.random() * array.length)];
}

function getRandomVerse() {
  const books = Object.keys(firstBibleData);
  const book = getRandomElement(books);

  const chapters = Object.keys(firstBibleData[book]);
  const chapter = getRandomElement(chapters);

  const verses = Object.keys(firstBibleData[book][chapter]);
  const verseNumber = getRandomElement(verses);

  return { book, chapter, verseNumber };
}

// Get the random verse reference
const verseRef = getRandomVerse();

// Fetch all translations of this verse
const allTranslations = {};

for (const version of bibleVersion) {
  try {
    const biblePath = path.resolve(version.path);
    const bibleData = JSON.parse(fs.readFileSync(biblePath, "utf-8"));

    const verseText =
      bibleData[verseRef.book]?.[verseRef.chapter]?.[verseRef.verseNumber];

    if (verseText) {
      allTranslations[version.id] = {
        abbr: version.abbr,
        name: version.name,
        text: verseText,
      };
    } else {
      allTranslations[version.id] = {
        abbr: version.abbr,
        name: version.name,
        text: "Not available in this translation",
      };
    }
  } catch (error) {
    console.error(`Error loading ${version.id}:`, error);
    allTranslations[version.id] = {
      abbr: version.abbr,
      name: version.name,
      text: "Error loading translation",
    };
  }
}

// Convert to JSON for client-side use
const translationsJSON = JSON.stringify(allTranslations);
const verseRefJSON = JSON.stringify(verseRef);
---

<div class="verse">
  <h1 class="verse-heading">
    {verseRef.book}
    {verseRef.chapter}:{verseRef.verseNumber}
  </h1>
  <button id="refresh">Refresh</button>

  <div class="card-wrapper">
    {
      Object.entries(allTranslations).map(([id, translation]) => (
        <div class="card">
          <h2>{translation.name}</h2>
          <h3>{translation.abbr}</h3>
          <p>{translation.text}</p>
        </div>
      ))
    }
  </div>
</div>

<script define:vars={{ translationsJSON, verseRefJSON }}>
  // Parse the translations object
  const translations = JSON.parse(translationsJSON);
  const verseReference = JSON.parse(verseRefJSON);

  console.log("Verse Reference:", verseReference);
  console.log("All Translations:", translations);

  console.log("KJV Translation:", translations.eng_kjv?.text);
  console.log("NIV Translation:", translations.niv?.text);

  // Handle Random button click
  const randomButton = document.getElementById("refresh");
  randomButton?.addEventListener("click", () => {
    window.location.reload();
  });

  // Filter only translations that are available
  const availableTranslations = Object.entries(translations).filter(
    ([id, trans]) => trans.text !== "Not available in this translation"
  );
  console.log("Available Translations:", availableTranslations);
</script>
